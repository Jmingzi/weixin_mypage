<style lang="less">
    .user-info {
        height: 160rpx;
        padding: 30rpx 40rpx;
        background-color: #FC9153;

        .user-mask {
            background-color: rgba(0,0,0,.3);
        }
    }
    .left {
        display: inline-block;
        width: 150rpx;

        image {
            width: 100rpx;
            height: 100rpx;
            border-radius: 4rpx;
        }
    }

    .menu-block {
        &:first-child {
            border-bottom: 1rpx #ededed solid;
        }

        .menu {
            display: flex;
            align-items: center;
            flex-direction: column;
            width: 33.33%;
            padding: 30rpx 0;
            border-right: 1rpx #ededed solid;
        }
        .name {
            color: #666;
            padding: 16rpx 0 0 0;
        }
        .icon {
            width: 100rpx;
            height: 100rpx;
            // background-color: #eee;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .iconfont {
            font-size: 30px;
        }
    }

    .qms {
        background-color: #fff;
        padding: 20rpx 30rpx;
        margin-bottom: 20px;

        .qms-image {
            width: 60rpx;
            height: 60rpx;
        }

        .avatar-info {
            display: flex;
            align-items: center;
        }

        .qms-content {
            padding-top:10px;
            margin: 20rpx 0;
            word-break: break-all;
            
            &.bd-b {
                padding-bottom: 20rpx;
            }
        }
        .qms-img {
            height:150px !important;
            margin-top: 20rpx;
        }
    }
    
    .no-more {
        padding:10px 0 30px 0
    }
    
    .tag-area {
        padding:0 10px;
        
        .comment-tag {
            width: 16px;
            height: 16px;
        }
    }
    
    .color-blue {
        color: #22a7f0;
    }
    
    .comment-content-wrap {
        margin-top:10px;
        padding:5px;
    }
</style>
<template>
    <view class="container">
        <view class="user-info color-fff">
            <view class="w-100 h-100">
                <view class="left">
                    <image src="{{ userInfo.avatarUrl }}" lazy-load="true"/>
                    <view>{{ userInfo.nickName }}</view>
                </view>
            </view>
        </view>

        <view class="block bg-ff">
            <view class="menu-block flex-center-start" wx:for="{{ menuData }}" wx:for-item="menuItem" wx:key="index">
                <view class="menu" hover-class="bg-fa" wx:for="{{ menuItem }}" wx:for-index="i" wx:key="i" @tap="handleMenu({{item}})">
                    <view class="icon">
                        <text style="color:{{ item.color }}" class="iconfont" wx:if="{{ item.icon === 1 }}">&#xe642;</text>
                        <text style="color:{{ item.color }}" class="iconfont" wx:elif="{{ item.icon === 2 }}">&#xe62c;</text>
                        <text style="color:{{ item.color }}" class="iconfont" wx:elif="{{ item.icon === 3 }}">&#xe626;</text>
                        <text style="color:{{ item.color }}" class="iconfont" wx:elif="{{ item.icon === 4 }}">&#xe60c;</text>
                        <text style="color:{{ item.color }}" class="iconfont" wx:elif="{{ item.icon === 5 }}">&#xe682;</text>
                        <text style="color:{{ item.color }}" class="iconfont" wx:else>&#xe676;</text>
                    </view>
                    <text class="name">{{ item.name }}</text>
                </view>
            </view>
        </view>

        <panel>
            <view class="title" slot="title">心情邮件</view>

            <view class="qms" wx:for="{{ tableContentList }}">
                <view class="qms-top flex-center-between">
                    <view class="avatar-info">
                        <image class="qms-image"
                               src="{{ item.user && item.talkIsPub ? item.user.avatarUrl : '../libs/image/default.png' }}"
                               lazy-load="true"/>
                        
                        <view class="m-l20">
                            <view>{{ item.user && item.talkIsPub ? item.user.nickName : '匿名用户' }}</view>
                            <view class="color-999 font-12">
                                <text class="iconfont font-12 color-ccc">&#xe6ec;</text>
                                <text>{{ item.talkSystemInfo.model }}</text>
                            </view>
                        </view>
                    </view>
                    <view class="font-12 color-999">{{ item.createdAt }}</view>
                </view>

                <view class="qms-content {{ item.talkAddress ? 'bd-b' : '' }}">
                    <text>{{ item.talkContent }}</text>
                    
                    <image wx:if="{{ item.talkImg.length > 0 }}"
                           mode="aspectFit"
                           class="w-100 qms-img"
                           src="{{ item.talkImg[0].thumbUrl }}"
                           @tap="previewImage({{index}})"/>
                </view>
                
                <view class="p-b20" wx:if="{{ item.talkAddress }}">
                    <text class="font-12 color-ccc">{{ item.talkAddress.name }}</text>
                </view>
            
                <view class="bd-t p-t20 flex-center-end">
                    <view wx:if="{{ item.talkIsCard }}" hover-class="bg-f2" @tap="seeCard({{index}})">
                        <text class="iconfont font-14 color-aaa">&#xe642;</text>
                    </view>
                    <view wx:else></view>
                    <view class="flex-center tag-area" hover-class="bg-f2" @tap="clickCommentTag({{ index }})">
                        <image class="comment-tag" src="../libs/image/comment.png"/>
                    </view>
                </view>
                
                <!--评论-->
                <view class="bg-f2 comment-content-wrap font-12" wx:if="{{ item.comments.length > 0 }}">
                    <view class="flex-center-start"
                          wx:for="{{ item.comments }}"
                          wx:for-item="cItem"
                          wx:for-index="cIndex">
                        
                        <view wx:if="{{cItem.fUser.openid === item.openid}}">
                            <text class="color-blue" hover-class="bg-f2" @tap="reComment({{cItem.fUser}}, {{index}})">{{cItem.fUser.name}}</text>
                        </view>
                        <view wx:elif>
                            <text class="color-blue" hover-class="bg-f2" @tap="reComment({{cItem.fUser}}, {{index}})">{{cItem.fUser.name}}</text>
                            <text class="color-666">回复</text>
                            <text class="color-blue" hover-class="bg-f2" @tap="reComment({{cItem.tUser}}, {{index}})">{{cItem.tUser.name}}</text>
                        </view>
                        <view>
                            <text class="color-666">：{{ cItem.content }}</text>
                        </view>
                    </view>
                </view>
            </view>
        </panel>
        
        <view class="t-c font-12 no-more" wx:if="{{ noMoreData }}">
            <text class="color-999">没有更多数据了</text>
        </view>
        
        <block wx:if="{{ currentItem }}">
            <comment @comment-confirm.user="commentConfirm"
                     @hide-comment="hideComment"/>
        </block>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import DB from '../libs/db'
    import utils from '../libs/utils'
    import Panel from '../components/panel'
    import Comment from '../components/comment'

    export default class Index extends wepy.page {
        config = {
            navigationBarTitleText: '子曰i'
        }
    
        components = {
            panel: Panel,
            comment: Comment
        }

        data = {
            userInfo: DB.user ? DB.user : { nickName: '加载中...' },
            menuData: [
                [
                    { icon: 1, name: '寄心情', url: 'addTalk', color: '#FF9258' },
                    //{ icon: 4, name: '油耗记录', url: 'oilRecord', color: '#05BA96' },
                    //{ icon: 2, name: '我与故事', color: '#4990FA' },
                    //{ icon: 3, name: '阶段计划', color: '#40CFD0' }
                    ],
                [
                    //{ icon: 5, name: '密码箱', color: '#FF9258' },
                    //{ icon: 6, name: '关于', color:'#4990FA' }
                ]
            ],
            tableContentList: [],
            currentPageIndex: 1,
            loading: false,
            noMoreData: false,
            currentItem: null,
            //comments: []
        }
        
        events = {
            'hide-comment': () => {
                this.currentItem = null
            }
        }

        computed = {
            now () {
                return +new Date()
            }
        }

        methods = {
            handleMenu (item) {
                wx.navigateTo({ url: item.url + `?name=${item.name}` })
            },
            
            previewImage(index) {
                let urls = this.tableContentList.map(item => item.talkImg && item.talkImg[0] ? item.talkImg[0].url : undefined)
                urls = urls.filter(x => x)
                
                wx.previewImage({
                    current: this.tableContentList[index].talkImg[0].url,
                    urls
                })
            },
    
            seeCard(index) {
                wx.navigateTo({ url: `seeCard?id=${this.tableContentList[index].id}` })
            },
            
            commentConfirm (commentVal, $event) {
                if (!commentVal.trim()) {
                    return
                }
                
                let commentData = {
                    contentId: this.currentItem.id,
                    fUser: {
                        openid: DB.openid,
                        name: DB.user.nickName
                    },
                    tUser: {
                        openid: this.currentItem.openid,
                        name: this.currentItem.user.nickName
                    },
                    content: commentVal
                }
                //console.log(commentData)
                //return
                this.currentItem = null
                
                utils.loading()
                
                const comment = DB.setComment()
                Object.keys(commentData).forEach(key => {
                    comment.set(key, commentData[key])
                })
    
                comment.save().then(res => {
                    utils.loading(true)
                    
                    let index = this.tableContentList.findIndex(x => x.id === commentData.contentId)
                    let comment = Object.assign({objectId: res.id}, res.attributes)
                    console.log(commentData.contentId, index)
                    
                    if (this.tableContentList[index].comments) {
                        this.tableContentList[index].comments.push(comment)
                    } else {
                        this.tableContentList[index].comments = [comment]
                    }
                    
                    this.$apply()
                })
            },
    
            clickCommentTag (index) {
                this.currentItem = this.tableContentList[index]
                this.$broadcast('current-item', this.currentItem)
            },
    
            reComment (item, index) {
                // console.log(item.name)
                this.currentItem = this.tableContentList[index]
                this.$broadcast('current-item', Object.assign({user: {nickName: item.name}}, item))
            },
    
            hideComment (e) {
                console.log(e)
            }
        }
    
        onShareAppMessage () {
            return {
                title: '子曰i(你说)，活着就是为了最美好的明天',
                path: '/pages/index'
            }
        }
    
        onPullDownRefresh () {
            this.tableContentList = []
            this.noMoreData = false
            this.currentItem = null
            
            this.getList()
            wx.stopPullDownRefresh()
        }
    
        onReachBottom () {
            if (!this.loading && !this.noMoreData) {
                this.loading = true
                this.getList()
            }
        }
    
        formatTime (dateObj) {
            let time = dateObj.getTime()
            let nowObj = new Date()
            let now = new Date(`${nowObj.getFullYear()}/${nowObj.getMonth()+1}/${nowObj.getDate()} 00:00:00`).getTime()
            
            if (time > now) {
                return `今天 ${dateObj.getHours()}:${dateObj.getMinutes()}`
            } else if (time > now - 24*60*60*1000) {
                return `昨天 ${dateObj.getHours()}:${dateObj.getMinutes()}`
            } else if (time > now - 24*60*60*1000 * 2) {
                return `前天 ${dateObj.getHours()}:${dateObj.getMinutes()}`
            } else {
                return `${dateObj.getFullYear()}/${dateObj.getMonth()+1}/${dateObj.getDate()} ${dateObj.getHours()}:${dateObj.getMinutes()}`
            }
        }
        
        getList () {
            utils.loading()
            
            let lastCreateTime = this.tableContentList.length > 0
                ? this.tableContentList[this.tableContentList.length - 1].originCreatedAt
                : new Date()
            
            DB.queryBy('talk', false, 5, lastCreateTime).then((res) => {
                res = res.filter(x => x.createdAt.getTime() !== lastCreateTime.getTime())
    
                this.tableContentList = this.tableContentList.concat(res.map(item => {
                    return Object.assign({
                        id: item.id,
                        createdAt: this.formatTime(item.createdAt),
                        originCreatedAt: item.createdAt
                    }, item.attributes)
                }))
                
                if (res.length === 0) {
                    this.noMoreData = true
                } else {
                    // 拉取评论
                    this.getComment(res.map(item => item.id), lastCreateTime)
                }
                
                this.loading = false
                this.$apply()
                utils.loading(true)
            })
        }
    
        getComment (contentIds, lastCreateTime) {
            if (contentIds.length > 0) {
                DB.queryByArray(contentIds).then(res => {
                    let index = this.tableContentList.findIndex(x => x.originCreatedAt === lastCreateTime)
    
                    this.tableContentList.forEach((item, i) => {
                        if (i > index) {
                            item.comments = res.results.filter(x => x.attributes.contentId === item.id)
                        }
                    })
                    
                    // console.log(this.tableContentList)
                    this.$apply()
                })
            }
        }

        onLoad() {
            this.$parent.getUserInfo(user => {
                this.userInfo = user
                this.$apply()
    
                this.getList()
            })
        }
    }
</script>
