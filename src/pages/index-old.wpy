<style lang="less">
  .qms {
    background-color: #fff;
    padding: 20rpx 30rpx;
    margin-bottom: 20px;

    &:first-child {
      margin-top: 20px;
    }

    .qms-image {
      width: 60rpx;
      height: 60rpx;
    }

    .avatar-info {
      display: flex;
      align-items: center;
    }

    .qms-content {
      padding-top:10px;
      margin: 20rpx 0;
      word-break: break-all;

      &.bd-b {
        padding-bottom: 20rpx;
      }
    }
    .qms-img {
      height:150px !important;
      margin-top: 20rpx;
    }
  }

  .no-more {
    padding:10px 0 30px 0
  }

  .tag-area {
    padding:0 10px;

    .comment-tag {
      width: 16px;
      height: 16px;
    }
  }
</style>
<template>
  <view class="container">
    <view class="qms"
          wx:for="{{ tableContentList }}"
          wx:for-item="item"
          wx:key="id">
      <view class="qms-top flex-center-between">
        <view class="avatar-info">
          <image
            class="qms-image"
            src="{{ item.user && item.talkIsPub ? item.user.avatarUrl : '../libs/image/default.png' }}"
            lazy-load="true"/>

          <view class="m-l20">
            <view class="color-blue">{{ item.user && item.talkIsPub ? item.user.nickName : '匿名用户' }}</view>
            <view class="color-999 font-12" wx:if="{{ item.talkIsPub && item.talkIsShowSystemInfo }}">
              <!--<text class="iconfont font-12 color-ccc">&#xe6ec;</text>-->
              <text>{{ item.talkSystemInfo.model }}</text>
              <!--<text>{{ getModel(item.talkSystemInfo.model2) }}</text>-->
            </view>
          </view>
        </view>
        <view class="font-12 color-999">{{ item.createdAt }}</view>
      </view>

      <view class="qms-content">
        <text>{{ item.talkContent }}</text>

        <image
          wx:if="{{ item.talkImg.length > 0 }}"
          mode="aspectFill"
          class="w-100 qms-img"
          src="{{ item.talkImg[0].url }}"
          @tap="previewImage({{index}})"/>
      </view>

      <!--地址，评论-->
      <view class="flex-center-between bd-t p-t20">
        <view wx:if="{{ item.talkAddress }}">
          <text class="font-12 color-ccc">{{ item.talkAddress.name }}</text>
        </view>
        <view wx:else></view>

        <view class="flex-center-between">
          <view wx:if="{{ item.talkIsCard }}" hover-class="bg-f2" @tap="seeCard({{index}})">
            <text class="iconfont font-14 color-aaa">&#xe642;</text>
          </view>
          <view class="flex-center tag-area" hover-class="bg-f2" @tap="clickCommentTag({{ index }})">
            <image class="comment-tag" src="../libs/image/comment.png"/>
          </view>
          <view wx:if="{{ item.openid === userInfo.openid }}" hover-class="bg-f2" @tap="del({{index}})">
            <text class="iconfont font-14 color-aaa">&#xe660;</text>
          </view>
        </view>
      </view>

      <!--评论-->
      <view class="bg-f2 p-10 m-t20 comment-content-wrap font-12" wx:if="{{ item.comments.length > 0 }}">
        <view
          class="flex-center-start"
          wx:for="{{ item.comments }}"
          wx:key="id"
          wx:for-item="cItem"
          wx:for-index="cIndex"
          hover-class="bg-cc"
          @tap="reComment({{cItem.fUser}}, {{index}}, {{cItem}}, {{cIndex}})"
          @longpress="deleteComment">

          <view wx:if="{{cItem.tUser.openid === item.openid}}">
            <text class="color-blue">{{cItem.fUser.name}}</text>
          </view>
          <view wx:elif>
            <text class="color-blue">{{cItem.fUser.name}}</text>
            <text class="color-666">回复</text>
            <text class="color-blue">{{cItem.tUser.name}}</text>
          </view>
          <view>
            <text class="color-666">：{{ cItem.content }}</text>
          </view>
        </view>
      </view>
    </view>

    <view class="t-c font-12 no-more" wx:if="{{ noMoreData }}">
      <text class="color-999">没有更多数据了</text>
    </view>

    <block wx:if="{{ currentItem }}">
      <comment @comment-confirm.user="commentConfirm" @hide-comment="hideComment"/>
    </block>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import DB from '../libs/db'
  import utils from '../libs/utils'
  import Panel from '../components/panel'
  import Comment from '../components/commentAdd'
  //import CommentItem from '../components/commentItem'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: ''
    }

    components = {
      panel: Panel,
      comment: Comment
    }

    data = {
      userInfo: DB.user ? DB.user : { nickName: '加载中...' },
      tableContentList: [],
      currentPageIndex: 1,
      loading: false,
      noMoreData: false,
      currentItem: null
    }

    events = {
      'hide-comment': () => {
        this.currentItem = null
      }
    }

    computed = {
      now () {
        return +new Date()
      }
    }

    methods = {
      getModel(model) {
        console.log(model)
        return model.match(/iPhone \d.*?/)[0]
      },

      checkIsOwnTalk(item) {
        return item.openid === DB.openid
      },

      handleMenu (item) {
        wx.navigateTo({ url: item.url + `?name=${item.name}` })
      },

      previewImage(index) {
        let urls = this.tableContentList.map(item => item.talkImg && item.talkImg[0] ? item.talkImg[0].url : undefined)
        urls = urls.filter(x => x)

        wx.previewImage({
          current: this.tableContentList[index].talkImg[0].url,
          urls
        })
      },

      seeCard(index) {
        wx.navigateTo({ url: `seeCard?id=${this.tableContentList[index].id}` })
      },

      commentConfirm (commentVal) {
        if (!commentVal.trim()) {
          return
        }

        let commentData = {
          contentId: this.currentItem.id,
          fUser: {
            openid: DB.openid,
            name: DB.user.nickName
          },
          tUser: {
            openid: this.currentItem.openid,
            name: this.currentItem.user.nickName
          },
          content: commentVal,
          //contentObject: DB.getOneTalk(this.currentItem.id)
        }
        this.currentItem = null
        utils.loading()

        const comment = DB.setComment()
        Object.keys(commentData).forEach(key => {
          comment.set(key, commentData[key])
        })

        comment.save().then(res => {
          utils.loading(true)

          let index = this.tableContentList.findIndex(x => x.id === commentData.contentId)
          let comment = Object.assign({objectId: res.id}, res.attributes)
          // console.log(commentData.contentId, index)

          if (this.tableContentList[index].comments) {
            this.tableContentList[index].comments.push(comment)
          } else {
            this.tableContentList[index].comments = [comment]
          }

          this.$apply()
        })
      },

      clickCommentTag (index) {
        this.currentItem = this.tableContentList[index]
        this.$broadcast('current-item', this.currentItem)
      },

      reComment (item, index) {
        this.currentItem = Object.assign(
          {},
          this.tableContentList[index],
          {openid: item.openid, user: {nickName: item.name}}
        )
        this.$broadcast('current-item', Object.assign({user: {nickName: item.name}}, item))
      },

      hideComment (e) {
        console.log(e)
      },

      deleteComment (fUser, i, item, itemIndex) {
        if (fUser.openid !== DB.openid) {
          console.log('this comment is not yours')
          return
        }

        utils.modal({
          content: '删除该条评论？',
          showCancel: true,
        }).then((res) => {
          if (res.confirm) {
            DB.delComment(item.objectId).then(() => {
              this.tableContentList[i].comments.splice(itemIndex, 1)
              this.$apply()
            })
          }
        })
      },

      del (index) {
        utils.modal({
          content: '确定要删除这条数据吗？若存在评论也会一并删除。',
          showCancel: true,
        }).then((res) => {
          if (res.confirm) {
            const item = this.tableContentList[index]
            utils.loading()

            DB.delContentById(item.id).then(() => {
              if (item.comments && item.comments.length > 0) {
                // 删除评论
                DB.delCommentById(item.id).then(() => {
                  utils.loading(true)
                })
              } else {
                utils.loading(true)
              }

              this.tableContentList.splice(index, 1)
              this.$apply()
            })
          }
        })
      }
    }

    onShareAppMessage () {
      return {
        title: '子曰i，心情特写',
        path: '/pages/index'
      }
    }

    onPullDownRefresh () {
      this.resetData()
      this.getList()
      wx.stopPullDownRefresh()
    }

    onReachBottom () {
      if (!this.loading && !this.noMoreData) {
        this.loading = true
        this.getList()
      }
    }

    resetData () {
      this.tableContentList = []
      this.noMoreData = false
      this.currentItem = null
    }

    onShow () {
      const isAddNewTalk = wx.getStorageSync('isAddNewTalk')

      if (!this.userInfo.avatarUrl) {
        this.$parent.getUserInfo(user => {
          this.userInfo = user

          this.$apply()
          this.getList()
        })
      } else if (isAddNewTalk && isAddNewTalk === 1) {
        console.log('reset data to get list')
        this.resetData()
        this.getList()
        wx.setStorageSync('isAddNewTalk', 0)
      }
    }

    formatTime (dateObj) {
      let time = dateObj.getTime()
      let nowObj = new Date()
      let now = new Date(`${nowObj.getFullYear()}/${nowObj.getMonth()+1}/${nowObj.getDate()} 00:00:00`).getTime()

      if (time > now) {
        return `今天 ${dateObj.getHours()}:${dateObj.getMinutes()}`
      } else if (time > now - 24*60*60*1000) {
        return `昨天 ${dateObj.getHours()}:${dateObj.getMinutes()}`
      } else if (time > now - 24*60*60*1000 * 2) {
        return `前天 ${dateObj.getHours()}:${dateObj.getMinutes()}`
      } else {
        return `${dateObj.getFullYear()}/${dateObj.getMonth()+1}/${dateObj.getDate()} ${dateObj.getHours()}:${dateObj.getMinutes()}`
      }
    }

    getList () {
      utils.loading()

      let lastCreateTime = this.tableContentList.length > 0
        ? this.tableContentList[this.tableContentList.length - 1].originCreatedAt
        : new Date()

      DB.queryBy('talk', false, 5, lastCreateTime).then((res) => {
        res = res.filter(x => x.createdAt.getTime() !== lastCreateTime.getTime())

        this.tableContentList = this.tableContentList.concat(res.map(item => {
          // model.match(/iPhone \d.*?/)[0]
          item.attributes.talkSystemInfo.model = item.attributes.talkSystemInfo.model2.match(/iPhone \d.*?/)[0]
          return Object.assign({
            id: item.id,
            createdAt: this.formatTime(item.createdAt),
            originCreatedAt: item.createdAt,
            comments: []
          }, item.attributes)
        }))

        if (res.length === 0) {
          this.noMoreData = true
        } else {
          // 拉取评论
          this.getComment(res.map(item => item.id), lastCreateTime)
        }

        this.loading = false
        this.$apply()
        utils.loading(true)
      })
    }

    getComment (contentIds, lastCreateTime) {
      if (contentIds.length > 0) {
        DB.queryByArray(contentIds).then(res => {
          let index = this.tableContentList.findIndex(x => x.originCreatedAt === lastCreateTime)

          this.tableContentList.forEach((item, i) => {
            if (i > index) {
              item.comments = res.results.filter(x => x.attributes.contentId === item.id)
            }
          })

          // console.log(this.tableContentList)
          this.$apply()
        })
      }
    }
  }
</script>
